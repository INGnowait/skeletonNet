# encoding: utf-8
"""This file includes necessary params, info."""
import os
import mmcv
import os.path as osp
import scipy.io as scio
import math
import numpy as np
from mmcv import  Config
import cv2
import torch
import matplotlib.pyplot as plt

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets") #"/media/j/data/dataset/LINEMOD/" #osp.join(root_dir, "datasets")
bop_root = osp.join(data_root, "BOP_DATASETS/")
cfg = Config.fromfile(root_dir+'/configs/sken/air_flight/sken_base.py')
norm_scale = cfg.NORM_SCALE
# ---------------------------------------------------------------- #
# LINEMOD DATASET
# ---------------------------------------------------------------- #
dataset_root = osp.join(bop_root, "air_flight")
train_dir = osp.join(dataset_root, )
test_dir = osp.join(dataset_root, )
model_dir = osp.join(dataset_root, )
vertex_scale = 0.01  #0.01 为 cm tranform into m
model_eval_dir = osp.join(dataset_root, )
# scaled models (.obj)
# model_scaled_dir = osp.join(dataset_root, "models_scaled")
# model_scaled_simple_dir = osp.join(dataset_root, "models_scaled_f5k")

# train_synt_blender_dir = osp.join(dataset_root, "lm_blender/")

# object info
objects = [
    "A320-sichuan",
    "A320-dragon",
    "A350-dongfang",
]
id2obj = {
    1: "A320-sichuan",
    2: "A320-dragon",
    3: "A350-dongfang",
}
obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

# model_paths = [osp.join(model_dir, "obj_{:06d}.ply").format(_id) for _id in id2obj]
texture_paths = None
# model_colors = [((i + 1) * 10, (i + 1) * 10, (i + 1) * 10) for i in range(obj_num)]  # for renderer

diameters = (
    np.array(
        [
            3664.42356,
            3664.42356,
            6525.18199,
        ]
    )
    / 100.0 #cm tranform into m
)  # 3dmodel中两个点之间的最大距离

# Camera info
# width = 1920
# height = 1000
# zNear = 0.25
# zFar = 6.0
# center = (height / 2, width / 2)
# camera_matrix = np.array([[2829, 0, 960.5], [0, 2829, 540.5], [0, 0, 1]])


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "models_info.json")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info


def get_fps_points():
    """key is str(obj_id) generated by tools/lm/lmo_1_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict
